const path = require('path');
const { CleanWebpackPlugin } = require('clean-webpack-plugin');
const CopyPlugin = require('copy-webpack-plugin');
const MiniCssExtractPlugin = require('mini-css-extract-plugin');
const ConcatPlugin = require('webpack-concat-plugin');
const HtmlWebpackPlugin = require('html-webpack-plugin');
const FaviconsWebpackPlugin = require('favicons-webpack-plugin');

module.exports = {
  mode: process.env.NODE_ENV === 'production' ? 'production' : 'development',
  entry: {
    fetch: 'whatwg-fetch',
    app: './src'
  },
  output: {
    filename: '[name].bundle.js',
    path: path.resolve(__dirname, 'www')
  },
  externals: {
    jquery: /^(jquery|\$)$/i,
    fastclick: /^fastclick$/i,
    'handlebars/runtime': {
      root: 'Handlebars',
      amd: 'handlebars.runtime',
      commonjs2: 'handlebars/runtime',
      commonjs: 'handlebars/runtime'
    },
    handlebars: {
      root: 'Handlebars',
      amd: 'Handlebars',
      commonjs: 'handlebars',
      commonjs2: 'handlebars'
    },
    lodash: {
      commonjs: 'lodash',
      commonjs2: 'lodash',
      amd: 'lodash',
      root: '_'
    }
  },
  resolve: {
    //   fallback: path.join(__dirname, 'src', 'helpers')
    modules: [path.resolve(__dirname, 'src'), 'node_modules']
  },
  plugins: [
    new CleanWebpackPlugin(),
    new CopyPlugin([{ from: './lib/jquery-mobile/css', to: 'assets/css' }]),
    new MiniCssExtractPlugin({
      filename: '[name].css',
      chunkFilename: '[id].css',
      ignoreOrder: false
    }),
    new HtmlWebpackPlugin({
      template: 'src/index.hbs',
      inject: true,
      meta: {
        'format-detection': 'telephone=no',
        viewport:
          'user-scalable=no, initial-scale=1, maximum-scale=1, minimum-scale=1, target-densitydpi=device-dpi, width=device-width, shrink-to-fit=no'
      },
      templateParameters: (compilation, assets, assetTags, options) => {
        return {
          compilation,
          webpackConfig: compilation.options,
          htmlWebpackPlugin: {
            tags: assetTags,
            files: assets,
            options
          },
          cordova: 'cordova.js',
          prod: process.env.NODE_ENV === 'production',
          title:
            process.env.NODE_ENV !== 'production'
              ? 'jQuery Mobile App UI Development'
              : 'jQuery Mobile App UI Production'
        };
      },
      filename: 'index.html'
    }),
    new ConcatPlugin({
      uglify: process.env.NODE_ENV === 'production',
      sourceMap: process.env.NODE_ENV !== 'production',
      name: 'libraries',
      outputPath: '.',
      fileName: '[name].[hash:8].js',
      filesToConcat: [
        './lib/jquery-mobile/js/jquery-1.10.2.js',
        './lib/fastclick/js/fastclick.js',
        './lib/jquery-mobile/js/jquery.mobile-1.4.5.js',
        './lib/jquery-mobile-router/js/jquery.mobile.router.js'
      ],
      injectType: 'prepend',
      attributes: {
        async: false
      }
    }),
    new FaviconsWebpackPlugin({
      // Your source logo (required)
      logo: './src/logo.png',
      // Enable caching and optionally specify the path to store cached data
      // Note: disabling caching may increase build times considerably
      cache: true,
      // Override the publicPath option usually read from webpack configuration
      // publicPath: '',
      // The directory to output the assets relative to the webpack output dir.
      // Relative string paths are allowed here ie '../public/static'. If this
      // option is not set, `prefix` is used.
      // outputPath: '/assets',
      // Prefix path for generated assets
      prefix: 'assets/',
      // Inject html links/metadata (requires html-webpack-plugin).
      // This option accepts arguments of different types:
      //  * boolean
      //    `false`: disables injection
      //    `true`: enables injection if that is not disabled in html-webpack-plugin
      //  * function
      //    any predicate that takes an instance of html-webpack-plugin and returns either
      //    `true` or `false` to control the injection of html metadata for the html files
      //    generated by this instance.
      inject: true,
      // Favicons configuration options (see below)
      favicons: {
        appName: 'jquerymobileui',
        appDescription: 'jQuery Mobile App UI',
        developerName: 'Innerwave. Co., Ltd.',
        developerURL: 'http://www.innerwave.co.kr', // prevent retrieving from the nearest package.json
        background: '#ddd',
        theme_color: '#333',
        icons: {
          coast: false,
          yandex: false
        }
      }
    })
  ],
  module: {
    rules: [
      {
        test: /\.m?js$/,
        exclude: /(node_modules|bower_components)/,
        use: {
          loader: 'babel-loader',
          options: {
            presets: ['@babel/preset-env']
          }
        }
      },
      {
        test: /\.hbs$/,
        loader: 'handlebars-loader',
        query: {
          partialDirs: [path.join(__dirname, 'pages')],
          helperDirs: ['./src/helpers']
        }
      },
      {
        test: /\.html$/i,
        loader: 'html-loader',
        options: {
          interpolate: true,
          minimize: {
            removeComments: false,
            collapseWhitespace: false
            // esModule: true
          }
        }
      },
      {
        test: /.css$/,
        use: [
          {
            loader: MiniCssExtractPlugin.loader,
            options: {
              publicPath: (resourcePath, context) => {
                // publicPath is the relative path of the resource to the context
                // e.g. for ./css/admin/main.css the publicPath will be ../../
                // while for ./css/main.css the publicPath will be ../
                return path.relative(path.dirname(resourcePath), context) + '/';
              },
              hmr: process.env.NODE_ENV !== 'production'
            }
          },
          'css-loader'
        ]
      },
      {
        test: /\.s[ac]ss$/i,
        use: [
          // 'style-loader',
          // 'css-loader',
          {
            loader: 'sass-loader',
            options: {
              implementation: require('node-sass'),
              sassOptions: {
                fiber: true
              }
            }
          }
        ]
      }
    ]
  },
  optimization: {
    namedModules: process.env.NODE_ENV !== 'production'
    // splitChunks: {
    //   chunks: 'all'
    // },
    // runtimeChunk: {
    //   name: entrypoint => `runtime~${entrypoint.name}`
    // }
  }
};
